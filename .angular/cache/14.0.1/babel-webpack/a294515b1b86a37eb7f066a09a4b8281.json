{"ast":null,"code":"import { MatTreeFlatDataSource, MatTreeFlattener, MatTreeNestedDataSource } from '@angular/material/tree';\nimport { FlatTreeControl, NestedTreeControl } from '@angular/cdk/tree';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/button\";\nimport * as i2 from \"@angular/material/icon\";\nimport * as i3 from \"@angular/material/tree\";\n\nfunction TreeDemoComponent_mat_tree_node_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-tree-node\", 7);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const node_r4 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", node_r4.name, \" \");\n  }\n}\n\nfunction TreeDemoComponent_mat_nested_tree_node_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-nested-tree-node\")(1, \"div\", 8)(2, \"button\", 9)(3, \"mat-icon\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 10);\n    i0.ɵɵelementContainer(7, 11);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const node_r5 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.nestedTreeControl.isExpanded(node_r5) ? \"expand_more\" : \"chevron_right\", \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", node_r5.name, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassProp(\"example-tree-invisible\", !ctx_r1.nestedTreeControl.isExpanded(node_r5));\n  }\n}\n\nfunction TreeDemoComponent_mat_tree_node_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-tree-node\", 12)(1, \"div\", 13);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const node_r6 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", node_r6.name, \" \");\n  }\n}\n\nfunction TreeDemoComponent_mat_tree_node_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-tree-node\", 12)(1, \"button\", 9)(2, \"mat-icon\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const node_r7 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.flatTreeControl.isExpanded(node_r7) ? \"expand_more\" : \"chevron_right\", \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", node_r7.name, \" \");\n  }\n}\n\nconst TREE_DATA = [{\n  name: 'Angular For Beginners',\n  children: [{\n    name: 'Introduction to Angular'\n  }, {\n    name: 'Angular Component @Input()'\n  }, {\n    name: 'Angular Component @Output()'\n  }]\n}, {\n  name: 'Angular Material In Depth',\n  children: [{\n    name: 'Introduction to Angular Material',\n    children: [{\n      name: 'Form Components'\n    }, {\n      name: 'Navigation and Containers'\n    }]\n  }, {\n    name: 'Advanced Angular Material',\n    children: [{\n      name: 'Custom Themes'\n    }, {\n      name: 'Tree Components'\n    }]\n  }]\n}];\nexport let TreeDemoComponent = /*#__PURE__*/(() => {\n  class TreeDemoComponent {\n    constructor() {\n      // Nested Tree\n      this.nestedDataSource = new MatTreeNestedDataSource();\n      this.nestedTreeControl = new NestedTreeControl(node => node.children); // Flat Tree\n\n      this.flatTreeControl = new FlatTreeControl(node => node.level, node => node.expandable);\n      this.treeFlattener = new MatTreeFlattener((node, level) => {\n        var _a;\n\n        return {\n          name: node.name,\n          expandable: ((_a = node.children) === null || _a === void 0 ? void 0 : _a.length) > 0,\n          level\n        };\n      }, node => node.level, node => node.expandable, node => node.children);\n      this.flatDataSource = new MatTreeFlatDataSource(this.flatTreeControl, this.treeFlattener);\n    }\n\n    ngOnInit() {\n      this.nestedDataSource.data = TREE_DATA;\n      this.flatDataSource.data = TREE_DATA;\n    }\n\n    hasNestedChild(index, node) {\n      var _a;\n\n      return ((_a = node === null || node === void 0 ? void 0 : node.children) === null || _a === void 0 ? void 0 : _a.length) > 0;\n    }\n\n    hasFlatChild(index, node) {\n      return node.expandable;\n    }\n\n  }\n\n  TreeDemoComponent.ɵfac = function TreeDemoComponent_Factory(t) {\n    return new (t || TreeDemoComponent)();\n  };\n\n  TreeDemoComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TreeDemoComponent,\n    selectors: [[\"tree-demo\"]],\n    decls: 11,\n    vars: 6,\n    consts: [[1, \"tree-demo-container\"], [1, \"example-tree\", \"mat-elevation-z4\", 3, \"dataSource\", \"treeControl\"], [\"matTreeNodeToggle\", \"\", 4, \"matTreeNodeDef\"], [4, \"matTreeNodeDef\", \"matTreeNodeDefWhen\"], [1, \"mat-elevation-z4\", 3, \"dataSource\", \"treeControl\"], [\"matTreeNodePadding\", \"\", 4, \"matTreeNodeDef\"], [\"matTreeNodePadding\", \"\", 4, \"matTreeNodeDef\", \"matTreeNodeDefWhen\"], [\"matTreeNodeToggle\", \"\"], [1, \"mat-tree-node\"], [\"mat-icon-button\", \"\", \"matTreeNodeToggle\", \"\"], [1, \"nested-node\"], [\"matTreeNodeOutlet\", \"\"], [\"matTreeNodePadding\", \"\"], [1, \"leaf-node\"]],\n    template: function TreeDemoComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h3\");\n        i0.ɵɵtext(2, \"Nested Tree Demo\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"mat-tree\", 1);\n        i0.ɵɵtemplate(4, TreeDemoComponent_mat_tree_node_4_Template, 2, 1, \"mat-tree-node\", 2);\n        i0.ɵɵtemplate(5, TreeDemoComponent_mat_nested_tree_node_5_Template, 8, 4, \"mat-nested-tree-node\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"h3\");\n        i0.ɵɵtext(7, \"Flat Tree Demo\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"mat-tree\", 4);\n        i0.ɵɵtemplate(9, TreeDemoComponent_mat_tree_node_9_Template, 3, 1, \"mat-tree-node\", 5);\n        i0.ɵɵtemplate(10, TreeDemoComponent_mat_tree_node_10_Template, 5, 2, \"mat-tree-node\", 6);\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"dataSource\", ctx.nestedDataSource)(\"treeControl\", ctx.nestedTreeControl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"matTreeNodeDefWhen\", ctx.hasNestedChild);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"dataSource\", ctx.flatDataSource)(\"treeControl\", ctx.flatTreeControl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"matTreeNodeDefWhen\", ctx.hasFlatChild);\n      }\n    },\n    dependencies: [i1.MatButton, i2.MatIcon, i3.MatNestedTreeNode, i3.MatTreeNodeDef, i3.MatTreeNodePadding, i3.MatTreeNodeToggle, i3.MatTree, i3.MatTreeNode, i3.MatTreeNodeOutlet],\n    styles: [\".tree-demo-container[_ngcontent-%COMP%]{font-family:Roboto;display:flex;flex-direction:column;justify-content:center;padding:30px}.leaf-node[_ngcontent-%COMP%]{padding-left:30px}.example-tree-invisible[_ngcontent-%COMP%]{display:none}.example-tree[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%], .example-tree[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]{margin-top:0;margin-bottom:0;list-style-type:none}.example-tree[_ngcontent-%COMP%]   .mat-nested-tree-node[_ngcontent-%COMP%]   .nested-node[_ngcontent-%COMP%]{padding-left:40px}.example-tree[_ngcontent-%COMP%]   .nested-node[_ngcontent-%COMP%] > .mat-tree-node[_ngcontent-%COMP%]{padding-left:40px}\"]\n  });\n  return TreeDemoComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}